openapi: 3.0.3
info:
  title: Homespace API
  version: 1.0.0
  description: API for the Homespaceâ„¢ Application
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: api_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/:
    post:
      operationId: api_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/reset/confirm/:
    post:
      operationId: api_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/user/:
    get:
      operationId: api_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: api_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: api_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/condominium/condominium/:
    get:
      operationId: api_condominium_condominium_list
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumList'
          description: ''
    post:
      operationId: api_condominium_condominium_create
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condominium'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Condominium'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Condominium'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
  /api/condominium/condominium/{id}/:
    get:
      operationId: api_condominium_condominium_retrieve
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
    put:
      operationId: api_condominium_condominium_update
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condominium'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Condominium'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Condominium'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
    patch:
      operationId: api_condominium_condominium_partial_update
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominium'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominium'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominium'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
    delete:
      operationId: api_condominium_condominium_destroy
      description: Django Rest Framework's ModelViewSet designed for Condominium model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium/{id}/condominium_common_area/:
    get:
      operationId: api_condominium_condominium_condominium_common_area_retrieve
      description: Return all 'CondominiumCommonArea' objects that belong to a 'Condominium'
        instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
  /api/condominium/condominium/{id}/condominium_grouping/:
    get:
      operationId: api_condominium_condominium_condominium_grouping_retrieve
      description: Return all 'CondominiumGrouping' objects that belong to a 'Condominium'
        instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
  /api/condominium/condominium/{id}/garage/:
    get:
      operationId: api_condominium_condominium_garage_retrieve
      description: |-
        Return all 'Garage' objects that belong to the current 'Condominium',
        its associated 'CondominiumGrouping', and 'Residential' entities.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
  /api/condominium/condominium/{id}/residential/:
    get:
      operationId: api_condominium_condominium_residential_retrieve
      description: |-
        Return all 'Residential' objects that belong to the current 'Condominium',
        as well as those that are part of associated 'CondominiumGrouping' entities.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condominium'
          description: ''
  /api/condominium/condominium_common_area/:
    get:
      operationId: api_condominium_condominium_common_area_list
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_create
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonArea'
          description: ''
  /api/condominium/condominium_common_area/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_retrieve
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium common area.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonArea'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium common area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonArea'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonArea'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_partial_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium common area.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonArea'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonArea'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonArea'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonArea'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_destroy
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonArea
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium common area.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_common_area/{id}/condominium_common_area_items/:
    get:
      operationId: api_condominium_condominium_common_area_condominium_common_area_items_retrieve
      description: Returns All the 'CondominiumCommonAreaItems' that belong to a 'CondominiumCommonArea'
        instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium common area.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonArea'
          description: ''
  /api/condominium/condominium_common_area_archive_of_rules/:
    get:
      operationId: api_condominium_condominium_common_area_archive_of_rules_list
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      parameters:
      - in: query
        name: fk_condominium_common_area
        schema:
          type: string
          format: uuid
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaArchiveOfRulesList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_archive_of_rules_create
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          description: ''
  /api/condominium/condominium_common_area_archive_of_rules/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_archive_of_rules_retrieve
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          archive of rules.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_archive_of_rules_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          archive of rules.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_archive_of_rules_partial_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          archive of rules.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaArchiveOfRules'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaArchiveOfRules'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaArchiveOfRules'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_archive_of_rules_destroy
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaArchiveOfRules
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          archive of rules.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_common_area_item/:
    get:
      operationId: api_condominium_condominium_common_area_item_list
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaItemList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_item_create
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaItem'
          description: ''
  /api/condominium/condominium_common_area_item/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_item_retrieve
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          item.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaItem'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_item_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaItem'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaItem'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_item_partial_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          item.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaItem'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaItem'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_item_destroy
      description: Django Rest Framework's ModelViewSet designed for CondominiumCommonAreaItem
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          item.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_common_area_reservation/:
    get:
      operationId: api_condominium_condominium_common_area_reservation_list
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      parameters:
      - in: query
        name: fk_condominium_common_area
        schema:
          type: string
          format: uuid
      - in: query
        name: fk_person_as_reservant
        schema:
          type: integer
      - in: query
        name: fk_uhab_as_reservant
        schema:
          type: string
          format: uuid
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaReservationList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_reservation_create
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          description: ''
  /api/condominium/condominium_common_area_reservation/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_reservation_retrieve
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_reservation_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_reservation_partial_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservation'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservation'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_reservation_destroy
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaModelViewSet with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_common_area_reservation_period/:
    get:
      operationId: api_condominium_condominium_common_area_reservation_period_list
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      parameters:
      - in: query
        name: fk_condominium_common_area
        schema:
          type: string
          format: uuid
      - in: query
        name: is_full_day
        schema:
          type: boolean
      - in: query
        name: is_period_active
        schema:
          type: boolean
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaReservationPeriodList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_reservation_period_create
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          description: ''
  /api/condominium/condominium_common_area_reservation_period/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_reservation_period_retrieve
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation period.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_reservation_period_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation period.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_reservation_period_partial_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation period.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservationPeriod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservationPeriod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaReservationPeriod'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_reservation_period_destroy
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaReservationPeriod model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          reservation period.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_common_area_utilization_fee_history/:
    get:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_list
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      parameters:
      - in: query
        name: fk_common_area
        schema:
          type: string
          format: uuid
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumCommonAreaUtilizationFeeHistoryList'
          description: ''
    post:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_create
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          description: ''
  /api/condominium/condominium_common_area_utilization_fee_history/{id}/:
    get:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_retrieve
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          utilization fee history.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          description: ''
    put:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          utilization fee history.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          description: ''
    patch:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_partial_update
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          utilization fee history.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaUtilizationFeeHistory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaUtilizationFeeHistory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumCommonAreaUtilizationFeeHistory'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
          description: ''
    delete:
      operationId: api_condominium_condominium_common_area_utilization_fee_history_destroy
      description: |-
        Django Rest Framework's ModelViewSet designed for
        CondominiumCommonAreaUtilizationFeeHistory model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium common area
          utilization fee history.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_contact_information/:
    get:
      operationId: api_condominium_condominium_contact_information_list
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      parameters:
      - in: query
        name: fk_condominium
        schema:
          type: string
          format: uuid
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumContactInformationList'
          description: ''
    post:
      operationId: api_condominium_condominium_contact_information_create
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumContactInformation'
          description: ''
  /api/condominium/condominium_contact_information/{id}/:
    get:
      operationId: api_condominium_condominium_contact_information_retrieve
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium contact information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumContactInformation'
          description: ''
    put:
      operationId: api_condominium_condominium_contact_information_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium contact information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumContactInformation'
          description: ''
    patch:
      operationId: api_condominium_condominium_contact_information_partial_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium contact information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumContactInformation'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumContactInformation'
          description: ''
    delete:
      operationId: api_condominium_condominium_contact_information_destroy
      description: Django Rest Framework's ModelViewSet designed for CondominiumContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this condominium contact information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/condominium_grouping/:
    get:
      operationId: api_condominium_condominium_grouping_list
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCondominiumGroupingReadList'
          description: ''
    post:
      operationId: api_condominium_condominium_grouping_create
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumGroupingRead'
          description: ''
  /api/condominium/condominium_grouping/{id}/:
    get:
      operationId: api_condominium_condominium_grouping_retrieve
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium grouping.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumGroupingRead'
          description: ''
    put:
      operationId: api_condominium_condominium_grouping_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium grouping.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CondominiumGroupingRead'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumGroupingRead'
          description: ''
    patch:
      operationId: api_condominium_condominium_grouping_partial_update
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium grouping.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumGroupingRead'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumGroupingRead'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCondominiumGroupingRead'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CondominiumGroupingRead'
          description: ''
    delete:
      operationId: api_condominium_condominium_grouping_destroy
      description: Django Rest Framework's ModelViewSet designed for CondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this condominium grouping.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/garage/:
    get:
      operationId: api_condominium_garage_list
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGarageList'
          description: ''
    post:
      operationId: api_condominium_garage_create
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Garage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Garage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Garage'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
          description: ''
  /api/condominium/garage/{id}/:
    get:
      operationId: api_condominium_garage_retrieve
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this garage.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
          description: ''
    put:
      operationId: api_condominium_garage_update
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this garage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Garage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Garage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Garage'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
          description: ''
    patch:
      operationId: api_condominium_garage_partial_update
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this garage.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGarage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGarage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGarage'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Garage'
          description: ''
    delete:
      operationId: api_condominium_garage_destroy
      description: Django Rest Framework's ModelViewSet designed for Garage model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this garage.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/residential/:
    get:
      operationId: api_condominium_residential_list
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      parameters:
      - in: query
        name: fk_uhab
        schema:
          type: string
          format: uuid
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResidentialList'
          description: ''
    post:
      operationId: api_condominium_residential_create
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Residential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Residential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Residential'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/:
    get:
      operationId: api_condominium_residential_retrieve
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
    put:
      operationId: api_condominium_residential_update
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Residential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Residential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Residential'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
    patch:
      operationId: api_condominium_residential_partial_update
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResidential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResidential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResidential'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
    delete:
      operationId: api_condominium_residential_destroy
      description: Django Rest Framework's ModelViewSet for handling Residential objects.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/residential/{id}/create_proprietary/:
    post:
      operationId: api_condominium_residential_create_proprietary_create
      description: Creates a 'Proprietary' for this 'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProprietaryCreation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProprietaryCreation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProprietaryCreation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          description: No response body
        '400':
          description: No response body
  /api/condominium/residential/{id}/employees/:
    get:
      operationId: api_condominium_residential_employees_retrieve
      description: |-
        Return a paginated list of 'Employee' objects working in a specified 'Residential' instance.

        An 'Employee' is a 'NaturalPerson' that has a 'UhabUserRole' of 'Employee' associated with a 'Residential'.

        It's important to note that an 'Employee' is not a Provider, hence, it's not a LegalPerson. An 'Employee'
        is a 'NaturalPerson' that works in a 'Residential' and has a 'UhabUserRole' of 'Employee'.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/garage/:
    get:
      operationId: api_condominium_residential_garage_retrieve
      description: Returns a paginated list of 'Garage' objects that belong to a specified
        'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/pets/:
    get:
      operationId: api_condominium_residential_pets_retrieve
      description: Returns a paginated list of 'Pet' objects that belong to a specified
        'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/proprietaries/:
    get:
      operationId: api_condominium_residential_proprietaries_retrieve
      description: |-
        Returns a list of 'NaturalPerson' and 'LegalPerson' objects
        representing proprietaries of a specified 'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/residents/:
    get:
      operationId: api_condominium_residential_residents_retrieve
      description: Returns a list of 'NaturalPerson' objects representing renters
        of a specified 'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/residential/{id}/vehicles/:
    get:
      operationId: api_condominium_residential_vehicles_retrieve
      description: Returns a paginated list of 'Vehicle' objects that belong to a
        specified 'Residential' instance.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Residential'
          description: ''
  /api/condominium/uhab/:
    get:
      operationId: api_condominium_uhab_list
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUhabList'
          description: ''
    post:
      operationId: api_condominium_uhab_create
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Uhab'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Uhab'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Uhab'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uhab'
          description: ''
  /api/condominium/uhab/{id}/:
    get:
      operationId: api_condominium_uhab_retrieve
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this uhab.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uhab'
          description: ''
    put:
      operationId: api_condominium_uhab_update
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this uhab.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Uhab'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Uhab'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Uhab'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uhab'
          description: ''
    patch:
      operationId: api_condominium_uhab_partial_update
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this uhab.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUhab'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUhab'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUhab'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uhab'
          description: ''
    delete:
      operationId: api_condominium_uhab_destroy
      description: Django Rest Framework's ModelViewSet designed for UhabModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this uhab.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/condominium/uhab_user_role/:
    get:
      operationId: api_condominium_uhab_user_role_list
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      parameters:
      - in: query
        name: fk_person
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUhabUserRoleList'
          description: ''
    post:
      operationId: api_condominium_uhab_user_role_create
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UhabUserRole'
          description: ''
  /api/condominium/uhab_user_role/{id}/:
    get:
      operationId: api_condominium_uhab_user_role_retrieve
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this uhab user role.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UhabUserRole'
          description: ''
    put:
      operationId: api_condominium_uhab_user_role_update
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this uhab user role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UhabUserRole'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UhabUserRole'
          description: ''
    patch:
      operationId: api_condominium_uhab_user_role_partial_update
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this uhab user role.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUhabUserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUhabUserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUhabUserRole'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UhabUserRole'
          description: ''
    delete:
      operationId: api_condominium_uhab_user_role_destroy
      description: Django Rest Framework's ModelViewSet designed for UhabUserRoleModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this uhab user role.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/address/:
    get:
      operationId: api_core_address_list
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressList'
          description: ''
    post:
      operationId: api_core_address_create
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/core/address/{id}/:
    get:
      operationId: api_core_address_retrieve
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    put:
      operationId: api_core_address_update
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    patch:
      operationId: api_core_address_partial_update
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    delete:
      operationId: api_core_address_destroy
      description: Django Rest Framework's ModelViewSet designed for Address model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this address.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/city/:
    get:
      operationId: api_core_city_list
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      parameters:
      - in: query
        name: fk_state
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCityList'
          description: ''
    post:
      operationId: api_core_city_create
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
  /api/core/city/{id}/:
    get:
      operationId: api_core_city_retrieve
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this city.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    put:
      operationId: api_core_city_update
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this city.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/City'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/City'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    patch:
      operationId: api_core_city_partial_update
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this city.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCity'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
          description: ''
    delete:
      operationId: api_core_city_destroy
      description: Django Rest Framework's ModelViewSet designed for City model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this city.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/color/:
    get:
      operationId: api_core_color_list
      description: ModelViewSet for 'Pet' instances.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedColorList'
          description: ''
    post:
      operationId: api_core_color_create
      description: ModelViewSet for 'Pet' instances.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Color'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
  /api/core/color/{id}/:
    get:
      operationId: api_core_color_retrieve
      description: ModelViewSet for 'Pet' instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this color.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    put:
      operationId: api_core_color_update
      description: ModelViewSet for 'Pet' instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this color.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Color'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    patch:
      operationId: api_core_color_partial_update
      description: ModelViewSet for 'Pet' instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this color.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedColor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedColor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedColor'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    delete:
      operationId: api_core_color_destroy
      description: ModelViewSet for 'Pet' instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this color.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/district/:
    get:
      operationId: api_core_district_list
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      parameters:
      - in: query
        name: fk_city
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDistrictList'
          description: ''
    post:
      operationId: api_core_district_create
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/District'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/District'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/District'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
  /api/core/district/{id}/:
    get:
      operationId: api_core_district_retrieve
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
    put:
      operationId: api_core_district_update
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/District'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/District'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/District'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
    patch:
      operationId: api_core_district_partial_update
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDistrict'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDistrict'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDistrict'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: ''
    delete:
      operationId: api_core_district_destroy
      description: Django Rest Framework's ModelViewSet designed for DistrictModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this district.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/postal_code/:
    get:
      operationId: api_core_postal_code_list
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: postal_code_number
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostalCodeList'
          description: ''
    post:
      operationId: api_core_postal_code_create
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostalCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostalCode'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalCode'
          description: ''
  /api/core/postal_code/{id}/:
    get:
      operationId: api_core_postal_code_retrieve
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this postal code.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalCode'
          description: ''
    put:
      operationId: api_core_postal_code_update
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this postal code.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostalCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostalCode'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalCode'
          description: ''
    patch:
      operationId: api_core_postal_code_partial_update
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this postal code.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostalCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostalCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostalCode'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostalCode'
          description: ''
    delete:
      operationId: api_core_postal_code_destroy
      description: Django Rest Framework's ModelViewSet designed for PostalCode model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this postal code.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/core/state/:
    get:
      operationId: api_core_state_list
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStateList'
          description: ''
    post:
      operationId: api_core_state_create
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/State'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
          description: ''
  /api/core/state/{id}/:
    get:
      operationId: api_core_state_retrieve
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this state.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
          description: ''
    put:
      operationId: api_core_state_update
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this state.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/State'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
          description: ''
    patch:
      operationId: api_core_state_partial_update
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this state.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedState'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedState'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedState'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
          description: ''
    delete:
      operationId: api_core_state_destroy
      description: Django Rest Framework's ModelViewSet designed for State model with
        ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this state.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/lookups/lookup_type_of_condominium_grouping/:
    get:
      operationId: api_lookups_lookup_type_of_condominium_grouping_list
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLookupTypeOfCondominiumGroupingList'
          description: ''
    post:
      operationId: api_lookups_lookup_type_of_condominium_grouping_create
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          description: ''
  /api/lookups/lookup_type_of_condominium_grouping/{id}/:
    get:
      operationId: api_lookups_lookup_type_of_condominium_grouping_retrieve
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of condominium
          grouping.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          description: ''
    put:
      operationId: api_lookups_lookup_type_of_condominium_grouping_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of condominium
          grouping.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          description: ''
    patch:
      operationId: api_lookups_lookup_type_of_condominium_grouping_partial_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of condominium
          grouping.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfCondominiumGrouping'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfCondominiumGrouping'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfCondominiumGrouping'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
          description: ''
    delete:
      operationId: api_lookups_lookup_type_of_condominium_grouping_destroy
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfCondominiumGrouping
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of condominium
          grouping.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/lookups/lookup_type_of_contact_information/:
    get:
      operationId: api_lookups_lookup_type_of_contact_information_list
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLookupTypeOfContactInformationList'
          description: ''
    post:
      operationId: api_lookups_lookup_type_of_contact_information_create
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfContactInformation'
          description: ''
  /api/lookups/lookup_type_of_contact_information/{id}/:
    get:
      operationId: api_lookups_lookup_type_of_contact_information_retrieve
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of contact
          information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfContactInformation'
          description: ''
    put:
      operationId: api_lookups_lookup_type_of_contact_information_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of contact
          information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfContactInformation'
          description: ''
    patch:
      operationId: api_lookups_lookup_type_of_contact_information_partial_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of contact
          information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfContactInformation'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfContactInformation'
          description: ''
    delete:
      operationId: api_lookups_lookup_type_of_contact_information_destroy
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfContactInformation
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of contact
          information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/lookups/lookup_type_of_residential/:
    get:
      operationId: api_lookups_lookup_type_of_residential_list
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLookupTypeOfResidentialList'
          description: ''
    post:
      operationId: api_lookups_lookup_type_of_residential_create
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfResidential'
          description: ''
  /api/lookups/lookup_type_of_residential/{id}/:
    get:
      operationId: api_lookups_lookup_type_of_residential_retrieve
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfResidential'
          description: ''
    put:
      operationId: api_lookups_lookup_type_of_residential_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of residential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LookupTypeOfResidential'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfResidential'
          description: ''
    patch:
      operationId: api_lookups_lookup_type_of_residential_partial_update
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of residential.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfResidential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfResidential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLookupTypeOfResidential'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTypeOfResidential'
          description: ''
    delete:
      operationId: api_lookups_lookup_type_of_residential_destroy
      description: Django Rest Framework's ModelViewSet designed for LookupTypeOfResidential
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this lookup type of residential.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/people/employee/:
    get:
      operationId: api_people_employee_list
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmployeeList'
          description: ''
    post:
      operationId: api_people_employee_create
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
  /api/people/employee/{id}/:
    get:
      operationId: api_people_employee_retrieve
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this employee.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    put:
      operationId: api_people_employee_update
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this employee.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    patch:
      operationId: api_people_employee_partial_update
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this employee.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEmployee'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
          description: ''
    delete:
      operationId: api_people_employee_destroy
      description: Django Rest Framework's ModelViewSet designed for Employee model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this employee.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/people/legal_person/:
    get:
      operationId: api_people_legal_person_list
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLegalPersonList'
          description: ''
    post:
      operationId: api_people_legal_person_create
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LegalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LegalPerson'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalPerson'
          description: ''
  /api/people/legal_person/{id}/:
    get:
      operationId: api_people_legal_person_retrieve
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this legal person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalPerson'
          description: ''
    put:
      operationId: api_people_legal_person_update
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this legal person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LegalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LegalPerson'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalPerson'
          description: ''
    patch:
      operationId: api_people_legal_person_partial_update
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this legal person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLegalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLegalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLegalPerson'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalPerson'
          description: ''
    delete:
      operationId: api_people_legal_person_destroy
      description: Django Rest Framework's ModelViewSet designed for LegalPerson model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this legal person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/people/natural_person/:
    get:
      operationId: api_people_natural_person_list
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNaturalPersonList'
          description: ''
    post:
      operationId: api_people_natural_person_create
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NaturalPerson'
          description: ''
  /api/people/natural_person/{id}/:
    get:
      operationId: api_people_natural_person_retrieve
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this natural person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NaturalPerson'
          description: ''
    put:
      operationId: api_people_natural_person_update
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this natural person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NaturalPerson'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NaturalPerson'
          description: ''
    patch:
      operationId: api_people_natural_person_partial_update
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this natural person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNaturalPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNaturalPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNaturalPerson'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NaturalPerson'
          description: ''
    delete:
      operationId: api_people_natural_person_destroy
      description: Django Rest Framework's ModelViewSet designed for NaturalPerson
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this natural person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/people/person/:
    get:
      operationId: api_people_person_list
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPersonList'
          description: ''
    post:
      operationId: api_people_person_create
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
  /api/people/person/{id}/:
    get:
      operationId: api_people_person_retrieve
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
    put:
      operationId: api_people_person_update
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Person'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
    patch:
      operationId: api_people_person_partial_update
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPerson'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPerson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPerson'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: ''
    delete:
      operationId: api_people_person_destroy
      description: Django Rest Framework's ModelViewSet designed for Person model
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/people/person_contact_information/:
    get:
      operationId: api_people_person_contact_information_list
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPersonContactInformationList'
          description: ''
    post:
      operationId: api_people_person_contact_information_create
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonContactInformation'
          description: ''
  /api/people/person_contact_information/{id}/:
    get:
      operationId: api_people_person_contact_information_retrieve
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person contact information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonContactInformation'
          description: ''
    put:
      operationId: api_people_person_contact_information_update
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person contact information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PersonContactInformation'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonContactInformation'
          description: ''
    patch:
      operationId: api_people_person_contact_information_partial_update
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person contact information.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPersonContactInformation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPersonContactInformation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPersonContactInformation'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonContactInformation'
          description: ''
    delete:
      operationId: api_people_person_contact_information_destroy
      description: Django Rest Framework's ModelViewSet for the 'PersonContactInformation'
        model.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this person contact information.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/pets/animal_breed/:
    get:
      operationId: api_pets_animal_breed_list
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      parameters:
      - in: query
        name: fk_animal_species
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnimalBreedList'
          description: ''
    post:
      operationId: api_pets_animal_breed_create
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalBreed'
          description: ''
  /api/pets/animal_breed/{id}/:
    get:
      operationId: api_pets_animal_breed_retrieve
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal breed.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalBreed'
          description: ''
    put:
      operationId: api_pets_animal_breed_update
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal breed.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalBreed'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalBreed'
          description: ''
    patch:
      operationId: api_pets_animal_breed_partial_update
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal breed.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnimalBreed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnimalBreed'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnimalBreed'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalBreed'
          description: ''
    delete:
      operationId: api_pets_animal_breed_destroy
      description: Django Rest Framework's ModelViewSet designed for AnimalBreedModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal breed.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/pets/animal_size/:
    get:
      operationId: api_pets_animal_size_list
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnimalSizeList'
          description: ''
    post:
      operationId: api_pets_animal_size_create
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalSize'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSize'
          description: ''
  /api/pets/animal_size/{id}/:
    get:
      operationId: api_pets_animal_size_retrieve
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal size.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSize'
          description: ''
    put:
      operationId: api_pets_animal_size_update
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal size.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalSize'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSize'
          description: ''
    patch:
      operationId: api_pets_animal_size_partial_update
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal size.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSize'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSize'
          description: ''
    delete:
      operationId: api_pets_animal_size_destroy
      description: Django Rest Framework's ModelViewSet designed for AnimalSizeModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal size.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/pets/animal_species/:
    get:
      operationId: api_pets_animal_species_list
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnimalSpeciesList'
          description: ''
    post:
      operationId: api_pets_animal_species_create
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSpecies'
          description: ''
  /api/pets/animal_species/{id}/:
    get:
      operationId: api_pets_animal_species_retrieve
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal species.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSpecies'
          description: ''
    put:
      operationId: api_pets_animal_species_update
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal species.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnimalSpecies'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSpecies'
          description: ''
    patch:
      operationId: api_pets_animal_species_partial_update
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal species.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSpecies'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSpecies'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnimalSpecies'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalSpecies'
          description: ''
    delete:
      operationId: api_pets_animal_species_destroy
      description: Django Rest Framework's ModelViewSet designed for AnimalSpeciesModelViewSet
        model with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this animal species.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/pets/pet/:
    get:
      operationId: api_pets_pet_list
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPetList'
          description: ''
    post:
      operationId: api_pets_pet_create
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
  /api/pets/pet/{id}/:
    get:
      operationId: api_pets_pet_retrieve
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    put:
      operationId: api_pets_pet_update
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    patch:
      operationId: api_pets_pet_partial_update
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPet'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: api_pets_pet_destroy
      description: Django Rest Framework's ModelViewSet designed for PetModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this pet.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/vehicles/vehicle/:
    get:
      operationId: api_vehicles_vehicle_list
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleList'
          description: ''
    post:
      operationId: api_vehicles_vehicle_create
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
  /api/vehicles/vehicle/{id}/:
    get:
      operationId: api_vehicles_vehicle_retrieve
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    put:
      operationId: api_vehicles_vehicle_update
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    patch:
      operationId: api_vehicles_vehicle_partial_update
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    delete:
      operationId: api_vehicles_vehicle_destroy
      description: Django Rest Framework's ModelViewSet designed for VehicleViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/vehicles/vehicle_manufacturer/:
    get:
      operationId: api_vehicles_vehicle_manufacturer_list
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleManufacturerList'
          description: ''
    post:
      operationId: api_vehicles_vehicle_manufacturer_create
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleManufacturer'
          description: ''
  /api/vehicles/vehicle_manufacturer/{id}/:
    get:
      operationId: api_vehicles_vehicle_manufacturer_retrieve
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle manufacturer.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleManufacturer'
          description: ''
    put:
      operationId: api_vehicles_vehicle_manufacturer_update
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle manufacturer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VehicleManufacturer'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleManufacturer'
          description: ''
    patch:
      operationId: api_vehicles_vehicle_manufacturer_partial_update
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle manufacturer.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicleManufacturer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicleManufacturer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicleManufacturer'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleManufacturer'
          description: ''
    delete:
      operationId: api_vehicles_vehicle_manufacturer_destroy
      description: Django Rest Framework's ModelViewSet designed for VehicleManufacturerModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle manufacturer.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/vehicles/vehicle_model/:
    get:
      operationId: api_vehicles_vehicle_model_list
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      parameters:
      - in: query
        name: fk_vehicle_manufacturer
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleModelList'
          description: ''
    post:
      operationId: api_vehicles_vehicle_model_create
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VehicleModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VehicleModel'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
          description: ''
  /api/vehicles/vehicle_model/{id}/:
    get:
      operationId: api_vehicles_vehicle_model_retrieve
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle model.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
          description: ''
    put:
      operationId: api_vehicles_vehicle_model_update
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VehicleModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VehicleModel'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
          description: ''
    patch:
      operationId: api_vehicles_vehicle_model_partial_update
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle model.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicleModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicleModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicleModel'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleModel'
          description: ''
    delete:
      operationId: api_vehicles_vehicle_model_destroy
      description: Django Rest Framework's ModelViewSet designed for VehicleModelModelViewSet
        with ModelSerializer
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this vehicle model.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street_name:
          type: string
          maxLength: 255
        number:
          type: string
          maxLength: 100
        complement:
          type: string
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
        fk_person:
          type: integer
          nullable: true
        fk_postal_code:
          type: integer
        fk_state:
          type: integer
          nullable: true
        fk_city:
          type: integer
          nullable: true
        fk_district:
          type: integer
          nullable: true
      required:
      - fk_postal_code
      - id
      - number
    AnimalBreed:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        fk_animal_species:
          type: integer
      required:
      - description
      - fk_animal_species
      - id
    AnimalSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
      required:
      - description
      - id
    AnimalSpecies:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
      required:
      - description
      - id
    City:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        city_name:
          type: string
          maxLength: 255
        fk_state:
          type: integer
      required:
      - city_name
      - fk_state
      - id
    Color:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
      required:
      - description
      - id
    Condominium:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        national_corporate_taxpayer_identification_number:
          type: string
          maxLength: 14
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_address:
          type: integer
      required:
      - fk_address
      - id
      - name
      - national_corporate_taxpayer_identification_number
    CondominiumCommonArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        capacity_of_people:
          type: integer
        does_it_requires_reservation:
          type: boolean
        does_it_allows_guests:
          type: boolean
        does_it_have_usage_fee:
          type: boolean
        does_it_allows_reservation_to_defaulters:
          type: boolean
        does_it_have_entry_checklist:
          type: boolean
        does_it_have_exit_checklist:
          type: boolean
        working_week_days:
          type: string
          description: Sunday to Saturday (7 digits) Where 1 = True, 0 = False
          pattern: ^[01]{7}$
          maxLength: 7
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_condominium_common_area_utilization_fee_history:
          type: integer
          nullable: true
      required:
      - capacity_of_people
      - id
      - name
    CondominiumCommonAreaArchiveOfRules:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        is_rule_active:
          type: boolean
        file_of_rules_attachment:
          type: string
          format: uri
        created_at:
          type: string
          format: date
          readOnly: true
        fk_condominium_common_area:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
      required:
      - created_at
      - created_by
      - description
      - file_of_rules_attachment
      - fk_condominium_common_area
      - id
    CondominiumCommonAreaItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        item_model:
          type: string
          maxLength: 255
        item_brand:
          type: string
          maxLength: 255
        date_of_acquisition:
          type: string
          format: date
        unitary_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,7}(?:\.\d{0,2})?$
        quantity_of_items:
          type: integer
        fk_condominium_common_area:
          type: string
          format: uuid
      required:
      - date_of_acquisition
      - description
      - fk_condominium_common_area
      - id
      - item_brand
      - item_model
      - quantity_of_items
      - unitary_value
    CondominiumCommonAreaReservation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reservation_date:
          type: string
          format: date
        simple_guest_list:
          type: string
          nullable: true
        is_reservation_approved_by_syndicator:
          type: boolean
        is_this_a_blockation_reservation:
          type: boolean
        fk_condominium_common_area:
          type: string
          format: uuid
        fk_person_as_reservant:
          type: integer
          nullable: true
        fk_uhab_as_reservant:
          type: string
          format: uuid
          nullable: true
        fk_common_area_reservation_period:
          type: integer
          nullable: true
        fks_natural_person_complete_guest_list:
          type: array
          items:
            type: integer
      required:
      - fk_common_area_reservation_period
      - fk_condominium_common_area
      - id
      - reservation_date
    CondominiumCommonAreaReservationPeriod:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_full_day:
          type: boolean
        start_time:
          type: string
          format: time
          nullable: true
        end_time:
          type: string
          format: time
          nullable: true
        is_period_active:
          type: boolean
        fk_condominium_common_area:
          type: string
          format: uuid
      required:
      - fk_condominium_common_area
      - id
    CondominiumCommonAreaUtilizationFeeHistory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        date_since_its_valid:
          type: string
          format: date
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
        fk_common_area:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
      required:
      - created_at
      - created_by
      - date_since_its_valid
      - fk_common_area
      - id
      - value
    CondominiumContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        contact:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        fk_lookup_type_of_contact_information:
          type: integer
        fk_condominium:
          type: string
          format: uuid
      required:
      - contact
      - description
      - fk_condominium
      - fk_lookup_type_of_contact_information
      - id
    CondominiumGroupingRead:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_lookup_type_of_condominium_grouping:
          type: integer
      required:
      - fk_lookup_type_of_condominium_grouping
      - id
      - name
    District:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        district_name:
          type: string
          maxLength: 255
        fk_city:
          type: integer
      required:
      - district_name
      - fk_city
      - id
    Employee:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        date_of_birth:
          type: string
          format: date
          nullable: true
        national_individual_taxpayer_identification:
          type: string
          maxLength: 11
        has_natural_person_given_permission_to_use_his_image:
          type: boolean
        avatar_image_file_name:
          type: string
          maxLength: 55
        working_week_days:
          type: string
          description: Sunday to Saturday (7 digits) Where 1 = True, 0 = False
          pattern: ^[01]{7}$
          maxLength: 7
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
      required:
      - id
      - name
      - person_contact_information_set
    Garage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        number_of_spots:
          type: integer
        is_garage_being_used:
          type: boolean
        is_garage_available_for_rent:
          type: boolean
        is_drawer_type_garage:
          type: boolean
        is_covered_type_garage:
          type: boolean
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
      required:
      - id
      - name
    LegalPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        national_corporate_taxpayer_identification_number:
          type: string
          nullable: true
          maxLength: 14
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
      required:
      - id
      - name
      - person_contact_information_set
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    LookupTypeOfCondominiumGrouping:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
      required:
      - description
      - id
    LookupTypeOfContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 200
      required:
      - description
      - id
    LookupTypeOfResidential:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
      required:
      - description
      - id
    NaturalPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        date_of_birth:
          type: string
          format: date
          nullable: true
        national_individual_taxpayer_identification:
          type: string
          maxLength: 11
        has_natural_person_given_permission_to_use_his_image:
          type: boolean
        avatar_image_file_name:
          type: string
          maxLength: 55
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
      required:
      - id
      - name
      - person_contact_information_set
    PaginatedAddressList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    PaginatedAnimalBreedList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AnimalBreed'
    PaginatedAnimalSizeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AnimalSize'
    PaginatedAnimalSpeciesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AnimalSpecies'
    PaginatedCityList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/City'
    PaginatedColorList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Color'
    PaginatedCondominiumCommonAreaArchiveOfRulesList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonAreaArchiveOfRules'
    PaginatedCondominiumCommonAreaItemList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonAreaItem'
    PaginatedCondominiumCommonAreaList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonArea'
    PaginatedCondominiumCommonAreaReservationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonAreaReservation'
    PaginatedCondominiumCommonAreaReservationPeriodList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonAreaReservationPeriod'
    PaginatedCondominiumCommonAreaUtilizationFeeHistoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumCommonAreaUtilizationFeeHistory'
    PaginatedCondominiumContactInformationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumContactInformation'
    PaginatedCondominiumGroupingReadList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CondominiumGroupingRead'
    PaginatedCondominiumList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Condominium'
    PaginatedDistrictList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/District'
    PaginatedEmployeeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    PaginatedGarageList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Garage'
    PaginatedLegalPersonList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LegalPerson'
    PaginatedLookupTypeOfCondominiumGroupingList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LookupTypeOfCondominiumGrouping'
    PaginatedLookupTypeOfContactInformationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LookupTypeOfContactInformation'
    PaginatedLookupTypeOfResidentialList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LookupTypeOfResidential'
    PaginatedNaturalPersonList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/NaturalPerson'
    PaginatedPersonContactInformationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
    PaginatedPersonList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Person'
    PaginatedPetList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    PaginatedPostalCodeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostalCode'
    PaginatedResidentialList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Residential'
    PaginatedStateList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/State'
    PaginatedUhabList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Uhab'
    PaginatedUhabUserRoleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UhabUserRole'
    PaginatedVehicleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
    PaginatedVehicleManufacturerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VehicleManufacturer'
    PaginatedVehicleModelList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/VehicleModel'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street_name:
          type: string
          maxLength: 255
        number:
          type: string
          maxLength: 100
        complement:
          type: string
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
        fk_person:
          type: integer
          nullable: true
        fk_postal_code:
          type: integer
        fk_state:
          type: integer
          nullable: true
        fk_city:
          type: integer
          nullable: true
        fk_district:
          type: integer
          nullable: true
    PatchedAnimalBreed:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        fk_animal_species:
          type: integer
    PatchedAnimalSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
    PatchedAnimalSpecies:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
    PatchedCity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        city_name:
          type: string
          maxLength: 255
        fk_state:
          type: integer
    PatchedColor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
    PatchedCondominium:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        national_corporate_taxpayer_identification_number:
          type: string
          maxLength: 14
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_address:
          type: integer
    PatchedCondominiumCommonArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        capacity_of_people:
          type: integer
        does_it_requires_reservation:
          type: boolean
        does_it_allows_guests:
          type: boolean
        does_it_have_usage_fee:
          type: boolean
        does_it_allows_reservation_to_defaulters:
          type: boolean
        does_it_have_entry_checklist:
          type: boolean
        does_it_have_exit_checklist:
          type: boolean
        working_week_days:
          type: string
          description: Sunday to Saturday (7 digits) Where 1 = True, 0 = False
          pattern: ^[01]{7}$
          maxLength: 7
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_condominium_common_area_utilization_fee_history:
          type: integer
          nullable: true
    PatchedCondominiumCommonAreaArchiveOfRules:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        is_rule_active:
          type: boolean
        file_of_rules_attachment:
          type: string
          format: uri
        created_at:
          type: string
          format: date
          readOnly: true
        fk_condominium_common_area:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
    PatchedCondominiumCommonAreaItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 255
        item_model:
          type: string
          maxLength: 255
        item_brand:
          type: string
          maxLength: 255
        date_of_acquisition:
          type: string
          format: date
        unitary_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,7}(?:\.\d{0,2})?$
        quantity_of_items:
          type: integer
        fk_condominium_common_area:
          type: string
          format: uuid
    PatchedCondominiumCommonAreaReservation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reservation_date:
          type: string
          format: date
        simple_guest_list:
          type: string
          nullable: true
        is_reservation_approved_by_syndicator:
          type: boolean
        is_this_a_blockation_reservation:
          type: boolean
        fk_condominium_common_area:
          type: string
          format: uuid
        fk_person_as_reservant:
          type: integer
          nullable: true
        fk_uhab_as_reservant:
          type: string
          format: uuid
          nullable: true
        fk_common_area_reservation_period:
          type: integer
          nullable: true
        fks_natural_person_complete_guest_list:
          type: array
          items:
            type: integer
    PatchedCondominiumCommonAreaReservationPeriod:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_full_day:
          type: boolean
        start_time:
          type: string
          format: time
          nullable: true
        end_time:
          type: string
          format: time
          nullable: true
        is_period_active:
          type: boolean
        fk_condominium_common_area:
          type: string
          format: uuid
    PatchedCondominiumCommonAreaUtilizationFeeHistory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        date_since_its_valid:
          type: string
          format: date
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
        created_at:
          type: string
          format: date-time
          readOnly: true
        fk_common_area:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
    PatchedCondominiumContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        contact:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        fk_lookup_type_of_contact_information:
          type: integer
        fk_condominium:
          type: string
          format: uuid
    PatchedCondominiumGroupingRead:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_lookup_type_of_condominium_grouping:
          type: integer
    PatchedDistrict:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        district_name:
          type: string
          maxLength: 255
        fk_city:
          type: integer
    PatchedEmployee:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        date_of_birth:
          type: string
          format: date
          nullable: true
        national_individual_taxpayer_identification:
          type: string
          maxLength: 11
        has_natural_person_given_permission_to_use_his_image:
          type: boolean
        avatar_image_file_name:
          type: string
          maxLength: 55
        working_week_days:
          type: string
          description: Sunday to Saturday (7 digits) Where 1 = True, 0 = False
          pattern: ^[01]{7}$
          maxLength: 7
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
    PatchedGarage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        number_of_spots:
          type: integer
        is_garage_being_used:
          type: boolean
        is_garage_available_for_rent:
          type: boolean
        is_drawer_type_garage:
          type: boolean
        is_covered_type_garage:
          type: boolean
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
    PatchedLegalPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        national_corporate_taxpayer_identification_number:
          type: string
          nullable: true
          maxLength: 14
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
    PatchedLookupTypeOfCondominiumGrouping:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
    PatchedLookupTypeOfContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 200
    PatchedLookupTypeOfResidential:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 50
    PatchedNaturalPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        date_of_birth:
          type: string
          format: date
          nullable: true
        national_individual_taxpayer_identification:
          type: string
          maxLength: 11
        has_natural_person_given_permission_to_use_his_image:
          type: boolean
        avatar_image_file_name:
          type: string
          maxLength: 55
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
    PatchedPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
    PatchedPersonContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        _type_of_contact_information:
          type: string
          readOnly: true
          title: ' type of contact information'
        description:
          type: string
          maxLength: 210
        fk_person:
          type: integer
        fk_lookup_type_of_contact_information:
          type: integer
    PatchedPet:
      type: object
      description: Model Serializer for 'Pet' objects.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nome
          maxLength: 250
        image:
          type: string
          format: uri
        fk_animal_species:
          type: integer
        fk_animal_breed:
          type: integer
          nullable: true
        fk_animal_size:
          type: integer
          nullable: true
        fk_animal_color:
          type: integer
          nullable: true
        fk_residential:
          type: string
          format: uuid
    PatchedPostalCode:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        postal_code_number:
          type: string
          maxLength: 8
        street_name:
          type: string
          maxLength: 255
        fk_city:
          type: integer
        fk_district:
          type: integer
          nullable: true
    PatchedResidential:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_lookup_type_of_residential:
          type: integer
    PatchedState:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        state_name:
          type: string
          maxLength: 255
        state_two_digits_code:
          type: string
          nullable: true
          pattern: ^[A-Z]{2}$
          maxLength: 2
        fk_country:
          type: integer
    PatchedUhab:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
    PatchedUhabUserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_this_the_main_role:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        deactivated_at:
          type: string
          format: date-time
          nullable: true
        fk_person:
          type: integer
        fk_uhab:
          type: string
          format: uuid
        fk_lookup_type_of_uhab_user_role:
          type: integer
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          format: uuid
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
    PatchedVehicle:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        vehicle_plate:
          type: string
          description: '"ABC-1234" | "ABC-1A34"'
          pattern: ^[A-Z]{3}-[0-9]{1}[A-Z|0-9]{1}[0-9]{2}$
          maxLength: 8
        manufacturing_year:
          type: integer
          minimum: 1970
        fk_vehicle_model:
          type: integer
        fk_color:
          type: integer
        fk_residential:
          type: string
          format: uuid
          nullable: true
    PatchedVehicleManufacturer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 60
    PatchedVehicleModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          title: Modelo
          maxLength: 100
        fk_vehicle_manufacturer:
          type: integer
    Person:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        person_contact_information_set:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformation'
          readOnly: true
        name:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        fk_user:
          type: string
          format: uuid
          nullable: true
        fks_address:
          type: array
          items:
            type: integer
      required:
      - id
      - name
      - person_contact_information_set
    PersonContactInformation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        _type_of_contact_information:
          type: string
          readOnly: true
          title: ' type of contact information'
        description:
          type: string
          maxLength: 210
        fk_person:
          type: integer
        fk_lookup_type_of_contact_information:
          type: integer
      required:
      - _type_of_contact_information
      - description
      - fk_lookup_type_of_contact_information
      - fk_person
      - id
    PersonContactInformationCreation:
      type: object
      description: |-
        This serializer is used for creating 'PersonContactInformation' objects. It is used in the
        'ProprietaryCreationSerializer' serializer. It is not used in any view.

        This is necessary because the Person will be created during execution so it's data will not be
        available during the creation of the PersonContactInformation.
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 210
        fk_person:
          type: integer
          readOnly: true
        fk_lookup_type_of_contact_information:
          type: integer
      required:
      - description
      - fk_lookup_type_of_contact_information
      - fk_person
      - id
    Pet:
      type: object
      description: Model Serializer for 'Pet' objects.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Nome
          maxLength: 250
        image:
          type: string
          format: uri
        fk_animal_species:
          type: integer
        fk_animal_breed:
          type: integer
          nullable: true
        fk_animal_size:
          type: integer
          nullable: true
        fk_animal_color:
          type: integer
          nullable: true
        fk_residential:
          type: string
          format: uuid
      required:
      - fk_animal_species
      - fk_residential
      - id
      - name
    PostalCode:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        postal_code_number:
          type: string
          maxLength: 8
        street_name:
          type: string
          maxLength: 255
        fk_city:
          type: integer
        fk_district:
          type: integer
          nullable: true
      required:
      - fk_city
      - id
      - postal_code_number
    ProprietaryCreation:
      type: object
      properties:
        is_natural_person:
          type: boolean
          description: Is the 'Person' a NaturalPerson or LegalPerson?
        is_this_the_main_role:
          type: boolean
          description: Does this 'Person' represent the main role of the 'UhabUserRole'?
        person:
          $ref: '#/components/schemas/NaturalPerson'
        person_contact_information:
          type: array
          items:
            $ref: '#/components/schemas/PersonContactInformationCreation'
      required:
      - is_natural_person
      - is_this_the_main_role
      - person
      - person_contact_information
    Residential:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
        fk_lookup_type_of_residential:
          type: integer
      required:
      - fk_lookup_type_of_residential
      - id
      - name
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    State:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        state_name:
          type: string
          maxLength: 255
        state_two_digits_code:
          type: string
          nullable: true
          pattern: ^[A-Z]{2}$
          maxLength: 2
        fk_country:
          type: integer
      required:
      - fk_country
      - id
      - state_name
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    Uhab:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
          maxLength: 255
        fk_uhab:
          type: string
          format: uuid
          nullable: true
          title: Unity of Habitation
      required:
      - id
      - name
    UhabUserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_this_the_main_role:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        deactivated_at:
          type: string
          format: date-time
          nullable: true
        fk_person:
          type: integer
        fk_uhab:
          type: string
          format: uuid
        fk_lookup_type_of_uhab_user_role:
          type: integer
      required:
      - created_at
      - fk_lookup_type_of_uhab_user_role
      - fk_person
      - fk_uhab
      - id
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          format: uuid
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - email
      - first_name
      - last_name
      - pk
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        vehicle_plate:
          type: string
          description: '"ABC-1234" | "ABC-1A34"'
          pattern: ^[A-Z]{3}-[0-9]{1}[A-Z|0-9]{1}[0-9]{2}$
          maxLength: 8
        manufacturing_year:
          type: integer
          minimum: 1970
        fk_vehicle_model:
          type: integer
        fk_color:
          type: integer
        fk_residential:
          type: string
          format: uuid
          nullable: true
      required:
      - fk_color
      - fk_vehicle_model
      - id
      - manufacturing_year
      - vehicle_plate
    VehicleManufacturer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          maxLength: 60
      required:
      - description
      - id
    VehicleModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
          title: Modelo
          maxLength: 100
        fk_vehicle_manufacturer:
          type: integer
      required:
      - description
      - fk_vehicle_manufacturer
      - id
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
